#!/bin/sh

# Author:       Action <dev@action-server.com>
# License:      GNU GPLv3
# Description:  Open rss link

set -e
script_name="$(basename "${0}")"
trap 'cleanup' EXIT INT QUIT TERM HUP

PREVIOUS_CHOICE_DIRECTORY="${XDG_CACHE_HOME:-$HOME/.cache}/script"
PREVIOUS_CHOICE_FILE="${PREVIOUS_CHOICE_DIRECTORY}/${script_name}.db"

print_error_gui(){
	if [ -z "${DISPLAY}" ] ;then
		return
	fi

	notify-send --app-name="${script_name}" "Error ${message}"
}

print_error(){
	message="${1}"
	printf '%s\n' "Error: ${message}" >&2
	print_error_gui
}

cleanup(){
	command_return_code="${?}"

	if [ "${command_return_code}" -eq 0 ]; then
		return
	fi

	if [ -z "${command_output}" ]; then
		return
	fi

	print_error "${command_output}"
}

check_arguments(){
	argument_count="${#}"

	if [ "${argument_count}" -ne 1 ]; then
		print_error "Usage: ${script_name} <link>"
		return 1
	fi
}

get_ytdl_format(){
	while [ -z "${quality_choice}" ]; do
		options=$(\
			cat <<-EOF 
			Default
			2160p 4k
			1440p 2k
			1080p Full HD
			720p HD
			480p SD
			360p
			240p
			144p
			EOF
		)

		quality_choice="$(\
			printf '%s' "${options}" | 
			dmenu -p 'Choose video format' -i -l 10)"

		if ! printf '%s' "${options}" | grep -q "^${quality_choice}\$"; then
			unset quality_choice
		fi
	done

	case "${quality_choice}" in
		'Default') quality='best';;
		'2160p 4k') quality='2160';;
		'1440p 2k') quality='1440';;
		'1080p Full HD') quality='1080';;
		'720p HD') quality='720';;
		'480p SD') quality='480';;
		'360p') quality='360';;
		'240p') quality='240';;
		'144p') quality='144';;
		*) unset quality_choice;;
	esac

	case "${quality}" in
		'best')
			ytdl_format="${quality}"
			;;
		*)
			ytdl_format="
			bestvideo[height<=${quality}]+bestaudio/
			best[height<=${quality}]/
			worstvideo+bestaudio/
			worst"
			;;
	esac
}

open_with_audio_player(){
	link="${1}"
	set_previous_choice

	command_output="$(mpv --ytdl-format='bestaudio' "${link}")"
}

open_with_video_player(){
	link="${1}"
	get_ytdl_format
	set_previous_choice

	command_output="$(mpv --ytdl-format="${ytdl_format}" "${link}")"
}

open_with_browser(){
	link="${1}"
	set_previous_choice

	command_output="$(sh -c "${BROWSER} ${link}")"
}

open_with_previous_choice(){
	link="${1}"
	media_player="${previous_media_player}"
	quality_choice="${previous_quality_choice}"

	open_with_media_player "${link}"
}

get_previous_choice(){
	if [ ! -f "${PREVIOUS_CHOICE_FILE}" ]; then
		return
	fi

	previous_choice="$(cat "${PREVIOUS_CHOICE_FILE}")"

	previous_media_player="$(\
		printf '%s' "${previous_choice}" | 
		grep 'media_player' | 
		cut -d '=' -f 2)"

	previous_quality_choice="$(\
		printf '%s' "${previous_choice}" | 
		grep 'quality_choice' | 
		cut -d '=' -f 2)"

	if [ -z "${previous_media_player}" ]; then
		return
	fi

	previous_choice="(${previous_media_player})"

	if [ -z "${previous_quality_choice}" ]; then
		return
	fi

	previous_choice="(${previous_media_player} -> ${previous_quality_choice})"
}

get_media_player(){
	options=$(\
		cat <<-EOF 
		${previous_choice}
		Browser
		Video
		Audio
		EOF
	)

	options="$(printf '%s' "${options}" | sed '/^$/d')"

	while [ -z "${media_player}" ]; do
		media_player="$(printf '%s' "${options}" | dmenu -p 'Choose' -i)"

		if ! printf '%s' "${options}" | grep -q "^${media_player}\$"; then
			unset media_player
		fi
	done
}

open_with_media_player(){
	link="${1}"

	case "${media_player}" in
		'Browser') open_with_browser "${link}";;
		'Video') open_with_video_player "${link}";;
		'Audio') open_with_audio_player "${link}";;
		"${previous_choice}") open_with_previous_choice "${link}";;
	esac
}

set_previous_choice(){
	mkdir -p "${PREVIOUS_CHOICE_DIRECTORY}"

	cat <<-EOF > "${PREVIOUS_CHOICE_FILE}"
		media_player=${media_player}
		quality_choice=${quality_choice}
	EOF
}

main(){
	link="${1}"

	check_arguments "${@}"

	get_previous_choice

	get_media_player

	set_previous_choice

	open_with_media_player "${link}"
}

main "${@}"
